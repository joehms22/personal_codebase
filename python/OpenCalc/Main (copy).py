#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Feb 27 13:35:04 2010

import wx

# begin wxGlade: extracode
import wx.html as html
from Lib.Code import Parser
import sys
# end wxGlade

class CalcWidget(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CalcWidget.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FULL_REPAINT_ON_RESIZE|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.main_window = wx.SplitterWindow(self, -1, style=wx.SP_3DBORDER|wx.SP_BORDER|wx.SP_LIVE_UPDATE)
        self.help_browser_panel = wx.Panel(self.main_window, -1)
        self.main_panel = wx.Panel(self.main_window, -1)
        self.notebook_manager = wx.Notebook(self.main_panel, -1, style=0)
        self.pad_panel = wx.Panel(self.notebook_manager, -1)
        
        # Menu Bar
        self.main_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.switch_to_pad_menu_item = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&Switch To Pad\tCtrl+Shift+P", "Switches to the pad", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.switch_to_pad_menu_item)
        wxglade_tmp_menu.AppendSeparator()
        self.clear_pad_menu_item = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "&Clear\tCtrl+K", "Clears the pad.", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.clear_pad_menu_item)
        self.main_menubar.Append(wxglade_tmp_menu, "&Pad")
        self.graph_menu = wx.Menu()
        self.save_graph = wx.MenuItem(self.graph_menu, wx.NewId(), "Save As", "", wx.ITEM_NORMAL)
        self.graph_menu.AppendItem(self.save_graph)
        self.main_menubar.Append(self.graph_menu, "&Graph")
        self.SetMenuBar(self.main_menubar)
        # Menu Bar end
        self.main_statusbar = self.CreateStatusBar(1, wx.ST_SIZEGRIP)
        self.output_text_ctrl = wx.TextCtrl(self.pad_panel, -1, "", style=wx.TE_MULTILINE)
        self.input_text_ctrl = wx.TextCtrl(self.pad_panel, -1, "")
        self.button_3 = wx.Button(self.pad_panel, -1, "&Submit")
        self.functions_panel = wx.Panel(self.notebook_manager, -1)
        self.graphs_panel = wx.Panel(self.notebook_manager, -1)
        self.table_panel = wx.Panel(self.notebook_manager, -1)
        self.bitmap_button_1 = wx.BitmapButton(self.help_browser_panel, -1, wx.Bitmap("/home/joseph/Python/Calc/Lib/Icons/go-home.png", wx.BITMAP_TYPE_ANY))
        self.panel_2 = wx.Panel(self.help_browser_panel, -1)
        self.label_1 = wx.StaticText(self.help_browser_panel, -1, "Help Browser", style=wx.ALIGN_CENTRE)
        self.html_window = html.HtmlWindow(self.help_browser_panel, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.switch_to_pad, self.switch_to_pad_menu_item)
        self.Bind(wx.EVT_MENU, self.clear_pad, self.clear_pad_menu_item)
        self.Bind(wx.EVT_MENU, self.save_graph_as, self.save_graph)
        self.Bind(wx.EVT_BUTTON, self.Submit_Input, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.LoadPage, self.bitmap_button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CalcWidget.__set_properties
        self.SetTitle("OpenCalc")
        self.SetSize((640, 509))
        self.main_statusbar.SetStatusWidths([-1])
        # statusbar fields
        main_statusbar_fields = ["OpenCalc 10.0 Stable"]
        for i in range(len(main_statusbar_fields)):
            self.main_statusbar.SetStatusText(main_statusbar_fields[i], i)
        self.bitmap_button_1.SetSize(self.bitmap_button_1.GetBestSize())
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CalcWidget.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        help_browser_sizer = wx.BoxSizer(wx.VERTICAL)
        help_browser_title_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.output_text_ctrl, 1, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(self.input_text_ctrl, 0, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(self.button_3, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        self.pad_panel.SetSizer(sizer_3)
        self.notebook_manager.AddPage(self.pad_panel, "Pad")
        self.notebook_manager.AddPage(self.functions_panel, "Functions")
        self.notebook_manager.AddPage(self.graphs_panel, "Graphs")
        self.notebook_manager.AddPage(self.table_panel, "Tables")
        sizer_2.Add(self.notebook_manager, 1, wx.EXPAND, 0)
        self.main_panel.SetSizer(sizer_2)
        help_browser_title_sizer.Add(self.bitmap_button_1, 0, 0, 0)
        help_browser_title_sizer.Add(self.panel_2, 1, wx.EXPAND, 0)
        help_browser_title_sizer.Add(self.label_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        help_browser_sizer.Add(help_browser_title_sizer, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 1)
        help_browser_sizer.Add(self.html_window, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.help_browser_panel.SetSizer(help_browser_sizer)
        self.main_window.SplitVertically(self.main_panel, self.help_browser_panel)
        main_sizer.Add(self.main_window, 1, wx.EXPAND, 0)
        self.SetSizer(main_sizer)
        self.Layout()
        self.Centre()
        # end wxGlade
        self.LoadPage("")
        self.input_text_ctrl.Bind(wx.EVT_KEY_DOWN, self.input_key_press)
        self.main_window.SetMinimumPaneSize(1)
    
    def input_key_press(self, event):
        #If the user presses return or enter in the pad input area
        keycode = event.GetKeyCode()
        #If user pressed enter or return spawn the submit input event
        if keycode == wx.WXK_RETURN or keycode == wx.WXK_NUMPAD_ENTER:
            self.Submit_Input(event)
        event.Skip()

    def show_tab(self, event): # wxGlade: CalcWidget.<event_handler>
        print "Event handler `show_tab' not implemented!"
        event.Skip()
        

    def clear_pad(self, event): # wxGlade: CalcWidget.<event_handler>
        self.output_text_ctrl.Clear()
        event.Skip()
        

    def save_graph_as(self, event): # wxGlade: CalcWidget.<event_handler>
        print "Event handler `save_graph_as' not implemented!"
        event.Skip()

    def Submit_Input(self, event): # wxGlade: CalcWidget.<event_handler>
        if self.input_text_ctrl.GetValue() != "":
            #Parse the data
            self.output_text_ctrl.AppendText("==" + self.input_text_ctrl.GetValue() + "\n")
            self.output_text_ctrl.AppendText(str(Parser.parse(self.input_text_ctrl.GetValue()))+"\n")
            #If an error happens above the text will NOT be cleared, allowing the
            #user to correct their mistake easily.
            self.input_text_ctrl.Clear()
        event.Skip()

    def LoadPage(self, event): # wxGlade: CalcWidget.<event_handler>
        self.html_window.LoadPage("./Lib/Function Lookup/index.html")

    def switch_to_pad(self, event): # wxGlade: CalcWidget.<event_handler>
        self.notebook_manager.SetSelection(0)
        event.Skip()
    
    def write(self,text):
        #Used to print stdout to output control
        self.output_text_ctrl.AppendText(text+"\n")
        event.Skip()
# end of class CalcWidget


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    Main_Frame = CalcWidget(None, -1, "")
    app.SetTopWindow(Main_Frame)
    #Redirect stdout to the pad
    sys.stdout=Main_Frame
    Main_Frame.Show()
    app.MainLoop()
